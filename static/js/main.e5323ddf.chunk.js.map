{"version":3,"sources":["img/phone.svg","contacts/contact.js","contacts/contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","props","className","src","phone","alt","firstName","lastName","gender","contacts","id","Contacts","state","search","contactsAreFiltered","handleSearchChange","symbols","value","target","toLowerCase","setState","filter","contact","includes","placeholder","this","onChange","map","time","key","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,6MCa5BC,EAVC,SAACC,GAAD,OACZ,yBAAKC,UAAU,WACX,yBAAKC,IAAKC,IAAOC,IAAI,KACrB,yBAAKH,UAAU,gBAAgBD,EAAMK,WACrC,yBAAKJ,UAAU,gBAAgBD,EAAMM,UACrC,yBAAKL,UAAU,gBAAgBD,EAAMG,OACrC,yBAAKF,UAAU,gBAAgBD,EAAMO,UCLvCC,EAAW,CAAC,CACdC,GAAI,EACJJ,UAAW,uCACXC,SAAU,2EACVH,MAAO,gBACPI,OAAQ,QACT,CACCE,GAAI,EACJJ,UAAW,iCACXC,SAAU,+DACVH,MAAO,gBACPI,OAAQ,UACT,CACCE,GAAI,EACJJ,UAAW,yDACXC,SAAU,mDACVH,MAAO,iBACR,CACCM,GAAI,EACJJ,UAAW,iCACXC,SAAU,mDACVH,MAAO,gBACPI,OAAQ,UACT,CACCE,GAAI,EACJJ,UAAW,uCACXC,SAAU,yDACVH,MAAO,gBACPI,OAAQ,QACT,CACCE,GAAI,EACJJ,UAAW,uCACXC,SAAU,6CACVH,MAAO,gBACPI,OAAQ,SAGSG,E,4MAEjBC,MAAQ,CACJH,SAAS,GAAD,OAAMA,GACdI,OAAQ,YACRC,oBAAoB,GAAD,OAAML,I,EAG7BM,mBAAqB,SAACC,GAClB,IAAMC,EAAQD,EAAQE,OAAOD,MAAME,cAEnC,EAAKC,SAAS,CACZP,OAAQI,EACRH,oBAAqBL,EAASY,QAC5B,SAACC,GAAD,OACAA,EAAQhB,UAAUa,cAAcI,SAASN,EAAME,gBAAkBG,EAAQf,SAASY,cAAcI,SAASN,EAAME,gBAC/GG,EAAQlB,MAAMmB,SAASN,S,uDAY3B,OAGI,yBAAKf,UAAU,aAEX,2BAAOsB,YAAaC,KAAKb,MAAMC,OAAQa,SAAUD,KAAKV,qBACtD,yBAAKb,UAAU,sBACVuB,KAAKb,MAAME,oBAAoBa,KAAI,SAACL,GACjC,OAAO,kBAAC,EAAD,CAAShB,UAAWgB,EAAQhB,UAAWC,SAAUe,EAAQf,SAAUH,MAAOkB,EAAQlB,MAAOI,OAAQc,EAAQd,OAAQoB,KAAM,GAAIC,IAAKP,EAAQZ,c,GApCjIoB,aCnBvBC,E,uKAZX,OAEA,6BAEI,kBAAC,EAAD,W,GARUC,IAAMF,WCMJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5323ddf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone.61658484.svg\";","import React, {Component} from 'react';\r\nimport phone from '../img/phone.svg';\r\n\r\nconst Contact = (props) => (\r\n    <div className='contact'>\r\n        <img src={phone} alt=''/>\r\n        <div className='contact-item'>{props.firstName}</div>\r\n        <div className='contact-item'>{props.lastName}</div>\r\n        <div className='contact-item'>{props.phone}</div>\r\n        <div className='contact-item'>{props.gender}</div>\r\n    </div>\r\n)\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport './contacts.css';\r\nimport Contact from \"./contact\";\r\n\r\nconst contacts = [{\r\n    id: 1,\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    id: 2,\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    id: 3,\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\"\r\n}, {\r\n    id: 4,\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    id: 5,\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    id: 6,\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}];\r\n\r\nexport default class Contacts extends Component{\r\n\r\n    state = {\r\n        contacts: [...contacts],\r\n        search: 'search...',\r\n        contactsAreFiltered: [...contacts]\r\n    }\r\n\r\n    handleSearchChange = (symbols) => {\r\n        const value = symbols.target.value.toLowerCase();\r\n    \r\n        this.setState({\r\n          search: value,\r\n          contactsAreFiltered: contacts.filter(\r\n            (contact) =>\r\n            contact.firstName.toLowerCase().includes(value.toLowerCase()) || contact.lastName.toLowerCase().includes(value.toLowerCase()) ||\r\n            contact.phone.includes(value)\r\n          ),\r\n        });\r\n\r\n        // return {\r\n        //     contactsAreFiltered: [...contacts]\r\n        // }\r\n      };\r\n   \r\n\r\n    render(){\r\n        \r\n        return (\r\n           \r\n            \r\n            <div className='container'>\r\n                {/* <h2>{this.state.title}</h2> */}\r\n                <input placeholder={this.state.search} onChange={this.handleSearchChange} />\r\n                <div className='contacts-container'>\r\n                    {this.state.contactsAreFiltered.map((contact) => {\r\n                        return <Contact firstName={contact.firstName} lastName={contact.lastName} phone={contact.phone} gender={contact.gender} time={10} key={contact.id}/>\r\n                    })}\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport Contacts from './contacts/contacts';\n\n\n\n\nclass App extends React.Component {\n  \n\n  render(){\n    return(\n     \n    <div> \n        \n        <Contacts />\n\n    </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}